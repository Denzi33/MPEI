// ConsoleApplication20.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.

#define _CRT_SECURE_NO_WARNINGS  // Директива препроцесса для устранения предупреждений

#include <iostream>
#include <stdio.h>

using namespace std;  // Использование стандартного пространства имён

int main()
{
  setlocale(LC_ALL, "RUS");  // Установка для консоли русского языка

  cout << "\t\tОпределить число столбцов матрицы, сумма элементов которых положительна.\n\n";

  cout << "Введите количество строк матрицы:\n";

  int key = 1;  // Промежуточная переменная для проверки на валидность элемента
  int n;  // Размер массивов
  float N;  // Промежуточная переменная для проверки на целостность размеров массивов
  char a;  // Промежуточная переменная для проверки на отсутствие буквенных значений в размерах массивов

  if (scanf("%f%c", &N, &a) != 2 || a != '\n')  // Проверка размеров матрицы на буквенное значение
  {
    cout << "Неверное значение длины матрицы!";
    key = 0;  // Переключение флага для избежания дальнейших действий
  }
  else 
  {
    n = N;  
    if (n != N || n <= 0)  // Проверка на целостность и положительность размера матрицы
    {
      cout << "Неверное значение длины матрицы!";
      key = 0;  // Переключение флага для избежания дальнейших действий
    }

    int m;  // Размерность матрицы (количество столбцов)
    float M;  // Промежуточная переменная для проверки на целостность размеров матрицы
    char A;  // Промежуточная переменная для проверки на отсутствие буквенных значений в размерах матрицы

    if (key != 0)  // Проверка флага на наличие ошибок
    {
      cout << "Введите количество столбцов матрицы:\n";
      if (scanf("%f%c", &M, &A) != 2 || A != '\n')  // Проверка значения размерности матрицы на буквенное значение
      {
        cout << "Неверное значение длины матрицы!";
        key = 0;  // Переключение флага для избежания дальнейших действий
      }
      else 
      {
        m = M;
        if (m != M || m <= 0)  // Проверка валидности ввода размерности матрицы
        {
          cout << "Неверное значение длины матрицы!";
          key = 0;  // Переключение флага для избежания дальнейших действий
        }
      }
    }

    int count = 0;  // Обнуляем счётчик подходящих столбцов

    float** matrix;  

    if (key != 0)  // Проверка флага на наличие ошибок
    {
      matrix = new float* [N];  // Выделяем память под строки матрицы

      for (int i = 0; i < N; i++)  // Цикл для прогона по массиву по столбцам
      {
        matrix[i] = new float[M];  // Выделяем память под столбцы матрицы
      }

      char Z;  // Промежуточная переменная для проверки на отсутствие буквенных значений в элементах матрицы
      cout << "Введите элементы матрицы:\n";

      for (int i = 0; i < N; i++)  // Цикл для прогона по матрице по строкам
      {
        for (int j = 0; j < M; j++)  // Цикл для прогона по матрице по столбцам
        {
          if (key != 0)  // Проверка флага на наличие ошибок
          {
            cout << "Элемент" << " [" << i << "][" << j << "]\n";  // Вывод элемента матрицы
          }
          if (key != 0)  // Проверка флага на наличие ошибок
          {
            if (scanf("%f%c", &matrix[i][j], &Z) != 2 || Z != '\n')  // Проверка значения элемента матрицы на буквенное значение
            {
              cout << "Неверное значение элемента матрицы!";
              key = 0;  // Переключение флага для избежания дальнейших действий
              break;  // Преждевременный выход из цикла из-за некорректности ввода координат элемента матрицы
            }
          }
        }
      }

      int s = 0;  // Сумма элементов столбца
      if (key != 0)  // Проверка флага на наличие ошибок
      {
        for (int j = 0; j < M; j++)  // Цикл для прогона по матрицы по строкам
        {
          for (int i = 0; i < N; i++)  // Цикл для прогона по матрицы по столбцам
          {
            s += matrix[i][j];  // Прибавляем элемент столбца к сумме
          }

          if (s > 0)  // Проверяем положительная ли сумма элементов столбца
          {
            ++count;  // Индексируем счётчик
          }

          s = 0;  // Обнуляем сумму для столбцов
        }
      }

      if (key != 0)  // Проверка флага на наличие ошибок
      {
        cout << endl;
        cout << "Элементы вашей матрицы:" << endl;
        for (int i = 0; i < N; i++)  // Цикл для прогона по матрице по строкам
        {
          for (int j = 0; j < M; j++)  // Цикл для прогона по матрице по столбцам
          {
            cout << "Элемент матрицы " << "[" << i << "][" << j << "] = " << matrix[i][j] << " ";  // Вывод элемента матрицы
          }
          cout << endl;
        }
        cout << "Количество подходящих столбцов: " << count << endl;
      }

      if (key != 0)  // Проверка флага на наличие ошибок
      {
        for (int i = 0; i < N; i++)  // Цикл для прогона по матрице
        {
          free(matrix[i]);  // Очищение памяти из под столбцов матрице
        }
        free(matrix); // Очищение памяти из под строки матрицы
      }
      cout << endl;
    }
  }
  return 0;  // Сигнализирование процессору о удачном выполнение работы программы
}
